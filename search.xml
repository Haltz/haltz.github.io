<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一蓑烟雨任平生</title>
    <url>/2020/12/31/%E4%B8%80%E8%93%91%E7%83%9F%E9%9B%A8%E4%BB%BB%E5%B9%B3%E7%94%9F/</url>
    <content><![CDATA[<p>一蓑烟雨任平生，这句话出自苏东坡的定风波。</p>
<blockquote>
<p>莫听穿林打叶声，何妨吟啸且徐行，竹杖芒鞋轻胜马，谁怕，一蓑烟雨任平生。<br>料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。</p>
</blockquote>
<p>高中的时候，大概是高一，才第一次读到这首词。那是只是觉得这首词写的蛮好，但是其实还是更佩服滕王阁序那类。转眼差不多五年了，也第一次进入了20岁。</p>
<p>2020年，如果说一个词形容的话，那比较准确的应该是：魔幻。</p>
<p>年初就因为疫情，被锁在老家。二月又经历了分手，真的是一段折磨。后来又是和一个女生报复性谈恋爱，最后也是草草收场，至今我仍觉得有点对不起她。六月底，开始找到了小米的前端实习，开始回到武汉。八月初换到了字节的前端实习，开始前往北京。那几个月就是不断的上班，工作面试，还夹杂着保研的一些事情。九月底确定本校国光直博，也算有了归处。十月底离职，回到武汉。十一月确定老师，开始毕业设计，直到如今。</p>
<p>20年来象牙塔内，经历的从来是闲愁，也从来没用衡量人生的尺度。似乎除了成绩这些，没什么好担心的，没什么好兴奋的。枯燥单调的生活日复一日，年复一年。也曾时常问自己人生的意义到底在哪里？五年前我给出的答案是：为天地立心，为生命立命，为往圣继绝学，为万世开太平。我想名垂青史，想成为名动天下的大人物。我想成为精英，成为那些激起世界潮流的人。即使现在，那对我也是相当有诱惑的。</p>
<p>但是现在，我似乎没那么执着了。不知道怎么回事，今年那些句子开始渐渐的在我脑子里发出了声音。</p>
<blockquote>
<p>“夫天地者，万物之逆旅；光阴者，百代之过客。”</p>
</blockquote>
<blockquote>
<p>“逝者如斯，而未尝往也；盈虚者如彼，而卒莫消长也。”</p>
</blockquote>
<blockquote>
<p>“一蓑烟雨任平生。”</p>
</blockquote>
<p>其实苏东坡曾经早就写过了。</p>
<p>苏子愀然，正襟危坐，而问客曰：“何为其然也？”客曰：“‘月明星稀，乌鹊南飞。’此非曹孟德之诗乎？西望夏口，东望武昌，山川相缪，郁乎苍苍，此非孟德之困于周郎者乎？方其破荆州，下江陵，顺流而东也，舳舻千里，旌旗蔽空，酾酒临江，横槊赋诗，固一世之雄也，而今安在哉？况吾与子渔樵于江渚之上，侣鱼虾而友麋鹿，驾一叶之扁舟，举匏樽以相属。寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。挟飞仙以遨游，抱明月而长终。知不可乎骤得，托遗响于悲风。”<br>苏子曰：“客亦知夫水与月乎？逝者如斯，而未尝往也；盈虚者如彼，而卒莫消长也。盖将自其变者而观之，则天地曾不能以一瞬；自其不变者而观之，则物与我皆无尽也，而又何羡乎！且夫天地之间，物各有主，苟非吾之所有，虽一毫而莫取。惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭。是造物者之无尽藏也，而吾与子之所共食。”</p>
<p>我也曾想成为曹操而不得，而曹操那样的人物如今又安在，我又当如何？</p>
<p>每当经历一处世界的角落，就愈加感觉到自己的渺小。今年一直走在奔波的路上，看到了曾经很多看不到的世界，感觉到了自己的能力不足以驾驭很多事情，大大小小的挫折，各种各样。很多目标需要的不只是努力，更何况我可能也算不上努力。这些执着很多时候让自己娱乐的时候有种负罪感，但是人懒惰的本性又驱使着我去玩，导致又不快乐又不努力。而且，越不快乐越不想努力，越不努力越不快乐，形成了一种恶性循环。</p>
<p>那怎么办？一蓑烟雨任平生。长路漫漫，皆是我的风景。这并不是为了打破这种循环而想出来的，更像是一种新的人生的角度。万物均有尺度，人生的尺度也绝不只是所谓的万世开太平。我很佩服孙中山，毛泽东这些造福华夏的伟大人物，但是对于人性的洞察，对于社会的思考，对于本我的理解，也是应当可以被选择的道路。结识更多的人，见闻更多的故事，更全面的思考，更深刻的理解。人的物质是外界赋予的，但是灵魂是自己赋予的。我去经历平生风雨，来达到更多的“我”。这个过程是没有终点的，没有一个具体的目标，而且所有的交流都是面对自我，发现自我，改善自我。这条道路也没有任何现世意义，当然也没有来世的。我收获的也许只是心灵的满足，更多的自我。但是这不正是茫茫宇宙，亘古时空的唯一意义吗？那就是没有意义，意义是人层面的，是人赋予的。</p>
<p>写到这里，思绪已经混乱了。不知如何下笔，不过也已经足够作为今年的结笔了。很多事情，如何为何，也需要更多的琢磨。</p>
<p>那么就这样把。</p>
<p>2020再见，2021你好。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Dev Notes</title>
    <url>/2021/03/31/Linux%20Dev%20Notes/</url>
    <content><![CDATA[<ul>
<li><p><strong>bitmap_get_value8</strong></p>
<p>这里并不总是能得到8bit，因为取值是按照sizeof(unsigned long)来取，如果想去64n+(56-63)位的值，那么只能取到64n+(7-0)位。</p>
</li>
<li><p><strong>bitmap_clear/set</strong></p>
<p>这里有个例子，使用bitmap_get_value8(map, start)得到0xff，如果bitmap_clear(map, start, 1)理应得到0x7f，实际上我们得到的0xfe。其实执行是没有错误的，只是这里需要区分大端（Bit 7.6.5.4.3.2.1.0在内存里也是7.6.5.4.3.2.1.0）小端（Bit 7.6.5.4.3.2.1.0在内存里也是0.1.2.3.4.5.6.7）。如果是小端（大部分PC），那么就会有0x7F的情况。因此，<strong>bitmap_clear/set仅仅适用于需要具体到硬件如何存储bit的情况（个人理解），一般情况还是bitmap_set_value8</strong>。</p>
<ul>
<li>update: bitmap_set_value8对我来说貌似还是有些问题，既然如此还不如自己写呢。</li>
</ul>
</li>
<li><p>不能在spinlock内使用mutex或者semphore</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>开发注意事项</tag>
      </tags>
  </entry>
  <entry>
    <title>内核并行：锁和内核抢占</title>
    <url>/2021/03/15/%E5%86%85%E6%A0%B8%E5%B9%B6%E8%A1%8C%EF%BC%9A%E9%94%81%E5%92%8C%E5%86%85%E6%A0%B8%E6%8A%A2%E5%8D%A0/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="http://people.cs.pitt.edu/~ouyang/20150225-kernel-concurreny.html">http://people.cs.pitt.edu/~ouyang/20150225-kernel-concurreny.html</a></p>
</blockquote>
<p>现代操作系统基本上都原生支持并行，主要是通过SMP、中断、内核抢占这些来实现的。为了保证内核运行的正确，以及竞争状态下数据不会出错，业内发明了一些机制来确保控制路径（Control Path，下面会阐述）互斥。</p>
<blockquote>
<p>术语</p>
<ul>
<li><strong>控制路径</strong>（control path）：程序执行的最小实体，也是参与同步的最小单元。可以是一个线程，也可以是没有上下文的代码片段（比如说中断处理）。</li>
<li><strong>同步</strong>（synchronization）：多个实体的合作协调，也就是程序内控制路径的协调。比如互斥，生产者-消费者等等。</li>
<li><strong>互斥</strong>（mutual exclusion）：任意时刻，多个控制路径只允许其中一个访问特定数据。</li>
<li><strong>竞争状态</strong>（race condition）：互斥失效，多个控制路径彼此竞争访问特定数据。</li>
<li><strong>关键代码</strong>（critical section）：以互斥的方式访问特定数据的代码片段。</li>
<li><strong>原子操作</strong>（atmoic operation）：在内核编程的语境下，原子操作指的就是硬件原子化的读、写、加、比较、交换等操作。他们是高级同步机制（锁，信号量等）的基础。</li>
</ul>
</blockquote>
<p>Note that, it is important to distinguish between code and data in mutual exclusion.（不太明白这句话该怎么翻译）互斥总是与特定共享数据和多个访问共享数据控制路径绑定在一起。关键代码是访问数据的代码片段。</p>
<p><strong>Note</strong>：<strong>为了阐述方便，下面控制路径都翻译成线程，也就是普通的线程加上中断处理的代码片段</strong></p>
<h2 id="竞争状态"><a href="#竞争状态" class="headerlink" title="竞争状态"></a>竞争状态</h2><p>没有同步的时候，两个线程同时访问特定数据，就会产生竞争。</p>
<p>举个例子，下面这段代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">thread1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>  counter++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">thread2</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>  counter++;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>那么可能会发生如下的竞争情况</p>
<blockquote>
<p>Thread1: read from memory, counter = 0</p>
<p>Thread2: read from memory, counter = 0</p>
<p>Thread1: add in cpu, counter = 1</p>
<p>Thread2: add in cpu, counter = 1</p>
<p>Thread1: write back to memory, counter = 1</p>
<p>Thread2: write back to memory, counter = 1</p>
</blockquote>
<p>最后counter的值是1，但是其实应该是2.</p>
<p>为了阻止这种竞争状态，我们需要在访问数据counter的时候实现线程互斥。因此，我们可以加入spinlock来保护访问counter的代码片段。如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">spinlock_t</span> lock;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">thread1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>  spinlock(&amp;lock);<br>  counter++;<br>  spin_unlock(&amp;unlock);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">thread2</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>  ... same as thread1 ...<br>&#125;<br></code></pre></td></tr></table></figure>
<p>同步的原则就是，任何有可能被多线程同时访问的数据都应该有某个同步原语来保护（比如spinlock，mutex，sempore等等），保证访问互斥，除非访问本身就是原子的或者刻意实现竞争状态。</p>
<h2 id="内核并行"><a href="#内核并行" class="headerlink" title="内核并行"></a>内核并行</h2><p>现代操作系统原生支持并行，因此每个内核工程师都应该十分熟悉内核级别的并行性和同步机制。</p>
<p>内核级别并行：</p>
<ul>
<li>SMP（Symmetric multiprocessing）：多个处理器同时运行一段内核代码，共享内核数据。</li>
<li>内核抢占：即使是一个单处理器系统，如果支持内核抢占我们也可以称之为并行的操作系统。内核空间一个低优先级的线程可以被一个高优先级的线程抢占，高优先级线程可以访问低优先级线程的数据。因此，数据需要在抢占时被保护。</li>
<li>中断处理：假设一个操作系统只有一个处理器，一个运行的线程，那么就没有抢占和SMP问题。那么并行性就体现在中断处理上了。任意时刻硬件触发中断，中断处理的代码都会抢占当前运行的线程（中断处理是最高的优先级），除非关中断。如果中断处理抢占线程，那么它也可以访问原来线程的数据，此时数据也需要保护。</li>
</ul>
<p>为了保证数据正确，必须在所有并行情境下保证互斥。</p>
<h3 id="SMP"><a href="#SMP" class="headerlink" title="SMP"></a>SMP</h3><p>spinlock是SMP情景内最常见的保证互斥的方式。任何CPU之间共享的数据都应该被保护，但是CPU自己的数据就不用了因为它们只能被自己访问。spinlock很好但是并不能处理所有的并行情况，特别是抢占和中断这些。<br>下面是一个spinlock的简单例子。访问counter时候用来保护counter。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> counter=<span class="hljs-number">0</span>;<br>spinlock_t <span class="hljs-keyword">lock</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kernel</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;<br>        spinlock(&amp;<span class="hljs-keyword">lock</span>);<br>        counter++;<br>        spin_unlock(&amp;unlock);<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="抢占"><a href="#抢占" class="headerlink" title="抢占"></a>抢占</h4><p>过去系统为了简单不支持抢占，而且SMP也没流行。因此当时程序需要考虑的就只是中断。<br>下面这段程序展示了一个不支持抢占的简单内核。有两个app调用相同的系统调用，sycall时进入内核态，结束是返回用户态。为了让系统调用是线程安全的就必须在进入内核态时禁用抢占。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">application1</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;syscall();&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">application2</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;syscall();&#125;<br><br><span class="hljs-built_in">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">syscall</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;<br>        <span class="hljs-built_in">int</span> b;<br>        disable_preemption();<br>        ... operation <span class="hljs-keyword">on</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> b ...<br>        a++;<br>        ... operation <span class="hljs-keyword">on</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> b ...<br>        enable_preemption();<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这种方式的缺点</p>
<ul>
<li>内核响应不够好。假设现在app2优先级更高但是app1在内核态那么app2就必须等。对于延迟敏感的app或者RTOS特别不好。</li>
<li>如果syscall里面发生了死循环，或者syscall调用的驱动里面发生了死循环那么就会导致没有任何程序能够再次拿到这个CPU。</li>
</ul>
<p>因此现在的操作系统都是不同程度支持抢占的。所以共享数据保护需要同时考虑SMP访问和抢占。因此我们禁用抢占的时机需要更加好，粒度要更小。<br>下面这段代码只在访问共享变量的时候禁用抢占。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">application1</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;syscall();&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">application2</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;syscall();&#125;<br><br><span class="hljs-built_in">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">syscall</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;<br>        <span class="hljs-built_in">int</span> b;<br>        ... operation <span class="hljs-keyword">on</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> b ...<br>        disable_preemption();<br>        a++;<br>        enable_preemption();<br>        ... operation <span class="hljs-keyword">on</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> b ...<br>&#125;<br></code></pre></td></tr></table></figure>
<p>考虑到SMP，这段代码需要加上spinlock。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">application1</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;syscall();&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">application2</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;syscall();&#125;<br><br><span class="hljs-built_in">int</span> a=<span class="hljs-number">0</span>;<br>spinlock_t <span class="hljs-keyword">lock</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">syscall</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;<br>        <span class="hljs-built_in">int</span> b;<br>        ... operation <span class="hljs-keyword">on</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> b ...<br>        spin_lock(&amp;<span class="hljs-keyword">lock</span>);<br>        disable_preemption();<br>        a++;<br>        enable_preemption();<br>        spin_unlock(&amp;<span class="hljs-keyword">lock</span>);<br>        ... operation <span class="hljs-keyword">on</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> b ...<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在Linux内，spinlock会自动禁止抢占（通过自增一个全局变量preemption_count）。但是CPU自己的数据是不被spinlock保护的，因此内核代码应该是这样的。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">application1</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;syscall();&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">application2</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;syscall();&#125;<br><br><span class="hljs-built_in">int</span> a=<span class="hljs-number">0</span>;<br>PER_CPU_VAR x_per_cpu;<br>spinlock_t <span class="hljs-keyword">lock</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">syscall</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span>&#123;<br>        <span class="hljs-built_in">int</span> b;<br>        ... operation <span class="hljs-keyword">on</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> b ...<br>        linux_spin_lock(&amp;<span class="hljs-keyword">lock</span>);<br>        a++;<br>        linux_spin_unlock(&amp;<span class="hljs-keyword">lock</span>);<br>        ...<br>        disable_preemption();<br>        x_per_cpu++;<br>        enable_preemption();<br>        ... operation <span class="hljs-keyword">on</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> b ...<br>&#125;<br></code></pre></td></tr></table></figure>
<p>spinlock隐式禁止抢占，然后具体到CPU的数据需要显式禁止抢占。</p>
<h3 id="Interrupt-Handlers"><a href="#Interrupt-Handlers" class="headerlink" title="Interrupt Handlers"></a>Interrupt Handlers</h3><p>中断是硬件（典型情况，但很多时候其实不是）发出信号声明一些事件发生，然后中断处理代码就会抢占CPU（除非中断禁用了）。因此中断处理程序和一般内核代码共享的数据当内核代码访问时需要禁止中断。<br>之前的讨论没有涉及spinlock是如何在中断存在的情况下保护数据的。举个例子，内核程序获取spinlock，访问一段数据，此时中断插入，也获取这把spinlock，那么就会导致两种情况。</p>
<ul>
<li>单核：死锁</li>
<li>SMP：内核代码如果在另一个核上面跑，那么中断会在内核代码完成后获得spinlock，没有问题但也会导致性能下降。<br>因此，现在要涉及一下spinlock是如何在中断存在的情况下保护数据的。其实就是上锁之前先禁用中断，<code>spin_lock_irqsave</code>。<br>但是有趣的问题来了，如果中断被禁用了，那么抢占也就不存在了，这时候是否需要禁用抢占呢？（抢占也是通过中断机制实现的，但是和中断还是不同的）。这里看FAQ。</li>
</ul>
<h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><ul>
<li><code>spinlock</code> v.s. <code>spinlock_irq</code> v.s. <code>spinlock_irqsave</code><br>这些都是禁止抢占的。如果获取spinlock想要禁止中断，一般用irqsave而不是irq，因为irqsave包含了保存中断状态的过程。想象一下下面这种情况，<code>spinunlock_restore2()</code>会导致中断打开，这一般来说在spinlock1上锁期间是不被希望的。<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">spi<span class="hljs-symbol">nlock_irq1</span><span class="hljs-comment">()</span>;<br>spi<span class="hljs-symbol">nlock_irq2</span><span class="hljs-comment">()</span>;<br>spi<span class="hljs-symbol">nunlock_restore2</span><span class="hljs-comment">()</span>;<br>spi<span class="hljs-symbol">nunlock_restore1</span><span class="hljs-comment">()</span>;<br></code></pre></td></tr></table></figure></li>
<li>禁用抢占和禁用中断的区别<br>Linux内核在抢占的时候会有上下文切换，timer触发中断，中断返回检查need_reschedule()，是就换进程，不是就继续原来的。但是需要注意的是，内核代码自己也可以调用need_reschedule。因此当你确定内核代码没有自己触发reschedule的时候，禁用中断就能保证禁用抢占了。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/06/08/ArchLinux%20Manual/</url>
    <content><![CDATA[<h1 id="ArchLinux-Install-Memo"><a href="#ArchLinux-Install-Memo" class="headerlink" title="ArchLinux Install Memo"></a>ArchLinux Install Memo</h1><h3 id="GPG-Error"><a href="#GPG-Error" class="headerlink" title="GPG Error"></a>GPG Error</h3><p>pacman.conf设置SigLevel=Never</p>
<h3 id="mnt-var-lib-pacman-sync-core-db…-unrecognized-archive-format"><a href="#mnt-var-lib-pacman-sync-core-db…-unrecognized-archive-format" class="headerlink" title="/mnt/var/lib/pacman/sync/core.db… unrecognized archive format"></a>/mnt/var/lib/pacman/sync/core.db… unrecognized archive format</h3><p>删除*.db然后重新执行pacstrap /mnt base linux linux-firmware</p>
<h3 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h3><p>systemctl enable networks+dhcpcd+resolved，需要安装对应的包</p>
<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>useradd -m -g users -s /bin/zsh haltz</p>
<p>passed haltz</p>
<h3 id="安装kde-plasma"><a href="#安装kde-plasma" class="headerlink" title="安装kde-plasma"></a>安装kde-plasma</h3><p>安装xorg,kde</p>
<p>cp /etc/X11/xinit/xinitrc ~/.xinitrc</p>
<p>修改exec…一行为(exec后所有内容被忽略)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DESKTOP_SESSION</span>=plasma<br>exec startplasma-x11<br></code></pre></td></tr></table></figure>
<p>如要启动，startx</p>
<h3 id="设置tty字体"><a href="#设置tty字体" class="headerlink" title="设置tty字体"></a>设置tty字体</h3><p>sudo cp *.psf.gz /usr/share/kbd/consolefonts/</p>
<p>sudo set font *.psf.gz</p>
]]></content>
  </entry>
  <entry>
    <title>ArchLinux Memo</title>
    <url>/2021/05/30/ArchLinux-Memo/</url>
    <content><![CDATA[<h1 id="ArchLinux"><a href="#ArchLinux" class="headerlink" title="ArchLinux"></a>ArchLinux</h1><p>ArchLinux使用问题记录。</p>
<h2 id="Add-User"><a href="#Add-User" class="headerlink" title="Add User"></a>Add User</h2>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux Arch</tag>
      </tags>
  </entry>
</search>
